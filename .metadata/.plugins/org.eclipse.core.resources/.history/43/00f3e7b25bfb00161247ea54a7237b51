import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;

public class TagsReader {
    private TagsData data;
    private String error;
    private ReadState state;
    private ArrayList<String> prototypes;

    public TagsReader(TagsData data) {
        this.data = data;
        this.prototypes = new ArrayList();
        this.state = ReadState.None;
    }

    public ArrayList<String> read() {
        if (!this.CheckFiles()) {
            this.state = ReadState.Error;
            return this.prototypes;
        }
        try {
            this.RemoveExistingTagFile();
        }
        catch (Exception ex) {
            this.error = ex.toString();
            this.state = ReadState.Error;
            return this.prototypes;
        }
        String args = " -f " + this.data.getWorkingDirectory() + "/tags " + this.data.getCommandArgs() + " " + this.data.getSourceCode();
        SpawnResult r = Spawn.CommandLineSync(this.data.getCtagsExecutable(), args, this.data.getWorkingDirectory());
        if (r.getExitCode() != 0) {
            this.error = r.getStderrString();
            this.state = ReadState.Error;
            return this.prototypes;
        }
        try {
			this.state = this.ReadTagFile();
		} catch (Throwable e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        return this.prototypes;
    }

    private boolean CheckFiles() {
        if (!Files.exists(Paths.get(this.data.getCtagsExecutable(), new String[0]), new LinkOption[0])) {
            this.error = "El ejecutable no existe {0}" + this.data.getCtagsExecutable();
            return false;
        }
        if (!Files.exists(Paths.get(this.data.getWorkingDirectory(), new String[0]), new LinkOption[0])) {
            this.error = "El directorio de trabajo no existe {0}" + this.data.getWorkingDirectory();
            return false;
        }
        boolean fileExists = false;
        fileExists = Files.exists(Paths.get(this.data.getSourceCode(), new String[0]), new LinkOption[0]);
        if (fileExists) {
            return true;
        }
        String[] dirs = new File(this.data.getWorkingDirectory()).list();
        if (dirs.length == 0) {
            this.error = "El c\ufffddigo {0} no resuelve a ning\ufffdn archivo es {1}" + this.data.getSourceCode();
            return false;
        }
        return true;
    }

    private void RemoveExistingTagFile() {
        Path tagFile = Paths.get(this.data.getWorkingDirectory(), "tags");
        if (Files.exists(tagFile, new LinkOption[0])) {
            try {
                Files.delete(tagFile);
            }
            catch (IOException e) {
                this.error = "El archivo {1} existe y no se puede borrar" + e.getMessage();
            }
        }
    }

    private ReadState ReadTagFile() throws Throwable {
        Path tagFile2 = Paths.get(this.data.getWorkingDirectory(), "tags");
        Charset charset = Charset.forName("utf-8");
        if (Files.exists(tagFile2, new LinkOption[0]) && Files.isReadable(tagFile2)) {
            try {
                Throwable throwable = null;
                Object var4_6 = null;
                try {
                    BufferedReader reader = Files.newBufferedReader(tagFile2, charset);
                    try {
                        String line = null;
                        while ((line = reader.readLine()) != null) {
                            String proto = this.FunctionPrototype(line);
                            if (proto == null) continue;
                            this.prototypes.add(proto);
                        }
                    }
                    finally {
                        if (reader != null) {
                            reader.close();
                        }
                    }
                }
                catch (Throwable var4_7) {
                    if (throwable == null) {
                        throwable = var4_7;
                    } else if (throwable != var4_7) {
                        throwable.addSuppressed(var4_7);
                    }
                    throw throwable;
                }
            }
            catch (Exception e) {
                this.error = "The tagfile could not be read: {0}" + e.getMessage();
                return ReadState.Error;
            }
        }
        return ReadState.Success;
    }

    private boolean IsProtoLine(String tagsLine) {
        if (tagsLine.length() == 0) {
            return false;
        }
        char start = tagsLine.toCharArray()[0];
        if (start == '!') {
            return false;
        }
        int index = tagsLine.length() - 2;
        if (index < 1) {
            return false;
        }
        return tagsLine.substring(tagsLine.length() - 1).equals("f");
    }

    private String FunctionPrototype(String tagsLine) {
        if (!this.IsProtoLine(tagsLine)) {
            return null;
        }
        int startIndex = tagsLine.indexOf(94);
        int endIndex = tagsLine.indexOf(41);
        if (startIndex == -1 || endIndex == -1) {
            return null;
        }
        if (startIndex > endIndex) {
            return null;
        }
        try {
            return tagsLine.substring(startIndex + 1, endIndex + 1);
        }
        catch (Exception e) {
            System.out.println("Function Prototype Error: {0}" + e.toString());
            return null;
        }
    }

    public String getError() {
        return this.error;
    }

    public ReadState getState() {
        return this.state;
    }
}

