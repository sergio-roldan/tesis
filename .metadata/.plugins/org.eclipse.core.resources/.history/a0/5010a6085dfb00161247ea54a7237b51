import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ConvertInoToCSource {
    private TagsData data;
    private static String HEADER = "#include <Arduino.h>";
    private static String DEFINE = "#define ARDUINO 211";

    public ConvertInoToCSource(TagsData data) {
        this.data = data;
    }

    public boolean run() {
        TagsReader r = new TagsReader(this.data);
        ArrayList<String> protos = r.read();
        if (r.getState() != ReadState.Success) {
            System.out.println(r.getError());
            return false;
        }
        try {
            this.CopyFileToCSource(protos);
        }
        catch (Exception e) {
            System.out.println("Error copiando prototipos de {0}" + this.data.getSourceCode());
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }

    public void CopyFileToCSource(ArrayList<String> prototypes) {
        Path path = Paths.get(this.data.getSourceCode(), new String[0]);
        if (!Files.exists(path, new LinkOption[0])) {
            return;
        }
        String fileName = path.getFileName().toFile().getName();
        try {
            String extension = this.getExtension(path.getFileName().toString());
            String newFileName = fileName.substring(0, fileName.indexOf(extension));
            newFileName = String.valueOf(newFileName) + "cpp";
            Path newFilePath = Paths.get(this.data.getWorkingDirectory(), newFileName);
            Charset charset = Charset.forName("US-ASCII");
            BufferedWriter out = Files.newBufferedWriter(newFilePath, charset, new OpenOption[0]);
            out.write("\n");
            out.write("/* Convertido por ConvertInoToCSource para DIECC (c) Atilano */\n");
            out.write(HEADER);
            out.write(DEFINE);
            out.write("\n");
            for (String proto : prototypes) {
                out.write(String.valueOf(proto) + ";");
                out.newLine();
            }
            List<String> copyContents = this.FileGetContents(Paths.get(this.data.getSourceCode(), new String[0]));
            Iterator<String> i = copyContents.iterator();
            while (i.hasNext()) {
                out.write(String.valueOf(i.next()) + "\n");
            }
            out.close();
        }
        catch (IOException e) {
            System.out.println("Error copiando prototipos de {0} - m\ufffdtodo CopyFileToCSource" + this.data.getSourceCode());
            System.out.println(e.getMessage());
        }
    }

    private List<String> FileGetContents(Path path) {
        Charset charset = Charset.forName("US-ASCII");
        List<String> lines = null;
        try {
            lines = Files.readAllLines(path, charset);
            return lines;
        }
        catch (Exception e) {
            System.out.println("No puedo leer {0} para copia" + path);
            System.out.println(e.getMessage());
            return lines;
        }
    }

    private boolean HaveUnixLineTerminators(String fileContent) {
        if (!fileContent.contains(System.lineSeparator()) && fileContent.contains("\n")) {
            return true;
        }
        return false;
    }

    private String ConvertUnixToDos(String fileContent) {
        return fileContent.replace("\n", System.lineSeparator());
    }

    private String getExtension(String fileName) {
        Pattern pattern = Pattern.compile("\\.([^.]*)$");
        Matcher matcher = pattern.matcher(fileName);
        String ext = new String();
        if (matcher.find()) {
            ext = matcher.group(1);
        }
        return ext;
    }
}

